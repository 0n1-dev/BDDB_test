const Eris = require('eris');
const Promise = require('bluebird');
const path = require('path');
const fs = Promise.promisifyAll(require("fs"));
const config = require(path.resolve("config.json"));

global.mongoose = require("mongoose");

async function init(){
    mongoose.connect('mongodb://13.124.131.111:27017/guilds',{ useNewUrlParser: true, useUnifiedTopology: true, useCreateIndex: true });

    if(!config.discord.token) {
        console.error("No token found in config.json");
        process.exit(0);
    } else if(!config.discord.prefix) {
        console.error("No prefix(es) found in config.json");
        process.exit(0);
    }

    const bot = new Eris(config.discord.token, {
        getAllUsers: true,
        prefix: config.discord.prefix
    });
    require('./utils/dbFunction')(bot);

    let onListeners = await loadScripts(path.resolve("listeners"));
    onListeners.forEach(script => bot.on(script.name, script.exports));

    bot.on("ready", () => {
        bot.editStatus("online", { name: `${bot.guilds.size} servers | .help`, type: 3 });
    });

    bot.connect();
}

async function loadScripts(filepath, deep = false) {
    if(!fs.existsSync(filepath)) return [];

    let scripts = [];
    let files = await getFiles(filepath, file => file.endsWith(".js"), deep);

    files.forEach(file => {
        scripts.push({
            name: file.substring(file.lastIndexOf("/") + 1, file.length - 3),
            exports: require(file),
            path: path.parse(file)
        });
    });

    return scripts;
}

async function getFiles(filepath, filter = () => true, deep = false) {
    let files = await fs.readdirAsync(filepath);
    let validFiles = [];

    for(let file of files) {
        if(deep) {
            let stats = await fs.lstatAsync(`${filepath}/${file}`);
            if(stats.isDirectory()) validFiles = validFiles.concat(await getFiles(`${filepath}/${file}`, filter, deep));
        }

        if(filter(file)) validFiles.push(`${filepath}/${file}`);
    }

    return validFiles;
}

init();